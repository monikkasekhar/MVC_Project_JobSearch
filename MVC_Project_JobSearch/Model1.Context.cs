//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MVC_Project_JobSearch
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class MVC_JobSearch_DBEntities : DbContext
    {
        public MVC_JobSearch_DBEntities()
            : base("name=MVC_JobSearch_DBEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<AddJob> AddJobs { get; set; }
        public virtual DbSet<ApplyJob> ApplyJobs { get; set; }
        public virtual DbSet<CompanyReg_Tab> CompanyReg_Tab { get; set; }
        public virtual DbSet<LoginTab> LoginTabs { get; set; }
        public virtual DbSet<UserReg_Tab> UserReg_Tab { get; set; }
    
        public virtual int sp_companyReg(Nullable<int> cid, string cname, string caaddr, string cemail, Nullable<long> cphone, string cstatus)
        {
            var cidParameter = cid.HasValue ?
                new ObjectParameter("cid", cid) :
                new ObjectParameter("cid", typeof(int));
    
            var cnameParameter = cname != null ?
                new ObjectParameter("cname", cname) :
                new ObjectParameter("cname", typeof(string));
    
            var caaddrParameter = caaddr != null ?
                new ObjectParameter("caaddr", caaddr) :
                new ObjectParameter("caaddr", typeof(string));
    
            var cemailParameter = cemail != null ?
                new ObjectParameter("cemail", cemail) :
                new ObjectParameter("cemail", typeof(string));
    
            var cphoneParameter = cphone.HasValue ?
                new ObjectParameter("cphone", cphone) :
                new ObjectParameter("cphone", typeof(long));
    
            var cstatusParameter = cstatus != null ?
                new ObjectParameter("cstatus", cstatus) :
                new ObjectParameter("cstatus", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_companyReg", cidParameter, cnameParameter, caaddrParameter, cemailParameter, cphoneParameter, cstatusParameter);
        }
    
        public virtual int sp_Login(string una, string pwd, ObjectParameter status)
        {
            var unaParameter = una != null ?
                new ObjectParameter("una", una) :
                new ObjectParameter("una", typeof(string));
    
            var pwdParameter = pwd != null ?
                new ObjectParameter("pwd", pwd) :
                new ObjectParameter("pwd", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Login", unaParameter, pwdParameter, status);
        }
    
        public virtual ObjectResult<Nullable<int>> sp_loginId(string una, string pwd)
        {
            var unaParameter = una != null ?
                new ObjectParameter("una", una) :
                new ObjectParameter("una", typeof(string));
    
            var pwdParameter = pwd != null ?
                new ObjectParameter("pwd", pwd) :
                new ObjectParameter("pwd", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("sp_loginId", unaParameter, pwdParameter);
        }
    
        public virtual int sp_logininsert(Nullable<int> rid, string una, string pw, string utype)
        {
            var ridParameter = rid.HasValue ?
                new ObjectParameter("rid", rid) :
                new ObjectParameter("rid", typeof(int));
    
            var unaParameter = una != null ?
                new ObjectParameter("una", una) :
                new ObjectParameter("una", typeof(string));
    
            var pwParameter = pw != null ?
                new ObjectParameter("pw", pw) :
                new ObjectParameter("pw", typeof(string));
    
            var utypeParameter = utype != null ?
                new ObjectParameter("utype", utype) :
                new ObjectParameter("utype", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_logininsert", ridParameter, unaParameter, pwParameter, utypeParameter);
        }
    
        public virtual ObjectResult<string> sp_loginType(string una, string pwd)
        {
            var unaParameter = una != null ?
                new ObjectParameter("una", una) :
                new ObjectParameter("una", typeof(string));
    
            var pwdParameter = pwd != null ?
                new ObjectParameter("pwd", pwd) :
                new ObjectParameter("pwd", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("sp_loginType", unaParameter, pwdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> sp_MaxIdLogin()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("sp_MaxIdLogin");
        }
    
        public virtual ObjectResult<Nullable<int>> sp_RegId(string una, string pwd)
        {
            var unaParameter = una != null ?
                new ObjectParameter("una", una) :
                new ObjectParameter("una", typeof(string));
    
            var pwdParameter = pwd != null ?
                new ObjectParameter("pwd", pwd) :
                new ObjectParameter("pwd", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("sp_RegId", unaParameter, pwdParameter);
        }
    
        public virtual int sp_userReg(Nullable<int> uid, string una, string uadd, Nullable<int> uag, string ugen, Nullable<long> uph, string uem, string ustate, string udist, Nullable<int> upin, string uqual, Nullable<decimal> ucgpa, string usk, string ustatus)
        {
            var uidParameter = uid.HasValue ?
                new ObjectParameter("uid", uid) :
                new ObjectParameter("uid", typeof(int));
    
            var unaParameter = una != null ?
                new ObjectParameter("una", una) :
                new ObjectParameter("una", typeof(string));
    
            var uaddParameter = uadd != null ?
                new ObjectParameter("uadd", uadd) :
                new ObjectParameter("uadd", typeof(string));
    
            var uagParameter = uag.HasValue ?
                new ObjectParameter("uag", uag) :
                new ObjectParameter("uag", typeof(int));
    
            var ugenParameter = ugen != null ?
                new ObjectParameter("ugen", ugen) :
                new ObjectParameter("ugen", typeof(string));
    
            var uphParameter = uph.HasValue ?
                new ObjectParameter("uph", uph) :
                new ObjectParameter("uph", typeof(long));
    
            var uemParameter = uem != null ?
                new ObjectParameter("uem", uem) :
                new ObjectParameter("uem", typeof(string));
    
            var ustateParameter = ustate != null ?
                new ObjectParameter("ustate", ustate) :
                new ObjectParameter("ustate", typeof(string));
    
            var udistParameter = udist != null ?
                new ObjectParameter("udist", udist) :
                new ObjectParameter("udist", typeof(string));
    
            var upinParameter = upin.HasValue ?
                new ObjectParameter("upin", upin) :
                new ObjectParameter("upin", typeof(int));
    
            var uqualParameter = uqual != null ?
                new ObjectParameter("uqual", uqual) :
                new ObjectParameter("uqual", typeof(string));
    
            var ucgpaParameter = ucgpa.HasValue ?
                new ObjectParameter("ucgpa", ucgpa) :
                new ObjectParameter("ucgpa", typeof(decimal));
    
            var uskParameter = usk != null ?
                new ObjectParameter("usk", usk) :
                new ObjectParameter("usk", typeof(string));
    
            var ustatusParameter = ustatus != null ?
                new ObjectParameter("ustatus", ustatus) :
                new ObjectParameter("ustatus", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_userReg", uidParameter, unaParameter, uaddParameter, uagParameter, ugenParameter, uphParameter, uemParameter, ustateParameter, udistParameter, upinParameter, uqualParameter, ucgpaParameter, uskParameter, ustatusParameter);
        }
    
        public virtual int sp_JobInsert(Nullable<int> cid, string jna, Nullable<int> vacancy, string reqskill, string exp, string qual, Nullable<int> sal, string loc, Nullable<System.DateTime> sdate, Nullable<System.DateTime> edate, string jstatus)
        {
            var cidParameter = cid.HasValue ?
                new ObjectParameter("cid", cid) :
                new ObjectParameter("cid", typeof(int));
    
            var jnaParameter = jna != null ?
                new ObjectParameter("jna", jna) :
                new ObjectParameter("jna", typeof(string));
    
            var vacancyParameter = vacancy.HasValue ?
                new ObjectParameter("vacancy", vacancy) :
                new ObjectParameter("vacancy", typeof(int));
    
            var reqskillParameter = reqskill != null ?
                new ObjectParameter("reqskill", reqskill) :
                new ObjectParameter("reqskill", typeof(string));
    
            var expParameter = exp != null ?
                new ObjectParameter("exp", exp) :
                new ObjectParameter("exp", typeof(string));
    
            var qualParameter = qual != null ?
                new ObjectParameter("qual", qual) :
                new ObjectParameter("qual", typeof(string));
    
            var salParameter = sal.HasValue ?
                new ObjectParameter("sal", sal) :
                new ObjectParameter("sal", typeof(int));
    
            var locParameter = loc != null ?
                new ObjectParameter("loc", loc) :
                new ObjectParameter("loc", typeof(string));
    
            var sdateParameter = sdate.HasValue ?
                new ObjectParameter("Sdate", sdate) :
                new ObjectParameter("Sdate", typeof(System.DateTime));
    
            var edateParameter = edate.HasValue ?
                new ObjectParameter("Edate", edate) :
                new ObjectParameter("Edate", typeof(System.DateTime));
    
            var jstatusParameter = jstatus != null ?
                new ObjectParameter("jstatus", jstatus) :
                new ObjectParameter("jstatus", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_JobInsert", cidParameter, jnaParameter, vacancyParameter, reqskillParameter, expParameter, qualParameter, salParameter, locParameter, sdateParameter, edateParameter, jstatusParameter);
        }
    
        public virtual ObjectResult<sp_jobview_Result> sp_jobview()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_jobview_Result>("sp_jobview");
        }
    
        public virtual int sp_JobView_Check2(string qry)
        {
            var qryParameter = qry != null ?
                new ObjectParameter("qry", qry) :
                new ObjectParameter("qry", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_JobView_Check2", qryParameter);
        }
    
        public virtual int sp_ApplyJob(Nullable<int> jobid, Nullable<int> cid, Nullable<int> uid, Nullable<System.DateTime> date, string resume, string applystatus)
        {
            var jobidParameter = jobid.HasValue ?
                new ObjectParameter("jobid", jobid) :
                new ObjectParameter("jobid", typeof(int));
    
            var cidParameter = cid.HasValue ?
                new ObjectParameter("cid", cid) :
                new ObjectParameter("cid", typeof(int));
    
            var uidParameter = uid.HasValue ?
                new ObjectParameter("uid", uid) :
                new ObjectParameter("uid", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            var resumeParameter = resume != null ?
                new ObjectParameter("resume", resume) :
                new ObjectParameter("resume", typeof(string));
    
            var applystatusParameter = applystatus != null ?
                new ObjectParameter("applystatus", applystatus) :
                new ObjectParameter("applystatus", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_ApplyJob", jobidParameter, cidParameter, uidParameter, dateParameter, resumeParameter, applystatusParameter);
        }
    }
}
